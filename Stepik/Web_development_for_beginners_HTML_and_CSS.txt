1.1 HTML


HTML(HyperText Markup Language) - язык разметки гипертекста

Разметка - что это вообще такое? Представь, что ты передаёшь текст по сети. Как сделать в тексте заголовок? Выделить абзац? Подчеркнуть слово? 
Самый простой вариант - пометить начало и конец выделяемого фрагмента условными метками

   Пример:	<заголовок>HTML</заголовок>
		<полужирный>HyperText Markup Language</полужирный> <курсив>(гипертекст маркап лэнгуидж)</курсив> - язык разметки гипертекста
			
Это разметка

HTML позволил создавать документы, в которых были заголовки, абзацы, ссылки, таблицы, картинки и много всего прочего


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


1.2 Теги


Тег — это синтаксическая единица языка HTML, которая выделяет или создаёт элемент
      Это набор символов, с помощью которого браузер понимает, где элемент создается, начинается и заканчивается

      <h1>заголовок первого уровня (header 1)</h1>
      <p>абзац<i>курсив</i></p>

Есть 2 вида тегов: двойные и одинарные

1) Двойные теги показывает начало и конец элемента. Начало элемента обозначается открывающим тегом <…> , а конец - закрывающим </…>
   Двойной тег обязательно должен быть закрыт
   Даже несмотря на то, что современные браузеры умеют в некоторых случаях понимать разметку без закрытых тегов, лучше всегда закрывать их

2) Одинарные теги просто не имеют пары. Примеры: тег переноса строки <br> или горизонтальной линии <hr>
   Старые браузеры требовали закрывать одинарные теги: <br />, сейчас таких браузеров практически не осталось и допустимо использовать оба варианта синтаксиса
   
Теги можно вкладывать друг в друга, но при вложении тега нужно всегда помнить о том, что внутренний тег нужно закрывать раньше внешнего  

	Пример: <p>
		<em>Курсив внутри абзаца</em>
		</p>


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


1.3 Атрибуты


Атрибуты — это свойства тега. С помощью них мы задаём параметры тега

	Пример: тег <a> - ссылка. Для задания адреса, куда будет вести эта ссылка, нам понадобится атрибут href
		Вот так будет выглядеть ссылка на страницу ITC Вконтакте:  <a href="https://vk.com/itc.digital">ITC Вконтакте</a>

Атрибут указывается внутри тега, значение атрибута указывается внутри кавычек. Атрибуты отделяются друг от друга пробелами 

	Пример: ссылка на страницу ITC, которая откроется в новой вкладке:

		<a href="https://vk.com/itc.digital" target="_blank">ITC Вконтакте</a>

У атрибута может не быть значения, тогда наличие атрибута включает какой-то параметр, а отсутствие - отключает. 

	Пример: атрибут disabled. Если кнопке <button> задать атрибут disabled, она станет серой и на неё невозможно будет нажать

		<button disabled>Нельзя нажимать</button>
		
		
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


1.4 Особенности интерпретации HTML


Особенности интерпретации HTML

- перенос строки только через тег

  HTML воспринимает перенос строки как пробел. Это нужно потому, что редакторы кода не переносят строки, которые не помещаются в экран - так удобнее писать код
  Поэтому чтобы длинный текст влезал в экран, в коде ставятся переносы строки, которые не нужны, когда страница показывается в браузере

- несколько пробелов, идущих подряд, считаются за один

  Это происходит по той же причине, что и с переносом строки. Так просто удобнее форматировать код в редакторе 
  Из-за того, что теги вкладываются друг в друга, для удобного восприятия кода вложенность показывают отступами - пробелами
  
- произвольный регистр

  <br> даст такой же результат, что и <BR>, и <Br>, и <bR>. Несмотря на это, писать разметку лучше в нижнем регистре - это негласное правило
  
- перенос строки в теге

  При определении тега и его атрибутов можно переносить строку. Это полезно для длинных определений
  
  Пример: <img
	  src="http://example.com/cat.jpg"
          title="Мурка"
          alt="Рыжая кошка валяется в снегу"
          width="640"
          height="480"
	  >


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


2.1 Основные элементы


Структура HTML документа - скелет, на основе которого строится вся страница:	<!DOCTYPE html>
										<html>
										<head>
										  <meta charset="utf-8">
										  <title>Страница</title>
										</head>
										<body>
										  <h1>...</h1>
										  <p>...</p>
										</body>
										</html>
																				
<!DOCTYPE>

Первым тегом в любом HTML документе должен идти тег <!DOCTYPE>. Он говорит браузеру, по какому стандарту написана страница
На рассвете веба HTML существовал в разных несовместимых версиях, поэтому для их одновременной поддержки нужно было указывать версию явно
Сейчас все пришли к одному стандарту - HTML5. Поэтому для всех сайтов, которые создаются сегодня, нужно указывать <!DOCTYPE html> - так обозначается HTML5

<html>

Вторым тегом идет <html> - контейнер, который содержит два тега - <head> и <body>. HTML-страница должна заканчиваться закрытым тегом </html>

<head>

В теге <head> хранится информация о странице. Здесь указывают кодировку <meta charset="...">, имя страницы <title>...</title>, 
специальную информацию для поисковиков, а ещё тут подключаются стилевые файлы и скрипты. 
Тег <head> не отображается. Его цель — сказать браузеру информацию о странице

<body>

В теге <body> размещается весь контент страницы, который пользователь увидит в браузере


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


2.2 Элементы и их виды


Элементы - то, что создаётся тегами. Можно сказать, что теги это текстовое представление элементов

Элементы бывают двух видов:

1) Блочные элементы - составляют структуру страницы

  Особенности:

- блоки располагаются друг под другом по вертикали
- запрещено вставлять блочный элемент внутрь строчного
- занимают всё допустимое пространство по ширине
- высота вычисляется автоматически, исходя из содержимого

  Примеры:

- абзацы <р>
- списки: маркированные (с маркером) <ul> и нумерованные (с числами) <ol>
- заголовки: от первого уровня <h1> до шестого уровня <h6>
- статьи <article>
- разделы <section>
- длинные цитаты <blockquote>
- блоки общего назначения  <div>

2) Строчные элементы - используются для форматирования текстовых фрагментов. Обычно содержат одно или несколько слов

  Особенности:

- элементы, идущие подряд, располагаются на одной строке и переносятся на другую при необходимости
- внутрь допустимо вставлять текст или другие строчные элементы, помещать блочные элементы - запрещено

  Примеры:

- ссылки <a>
- выделенные слова <em>
- важные слова <strong>
- короткие цитаты <q>
- аббревиатуры <abbr>

Блочные элементы занимают всё доступное пространство по ширине
Строчные элементы ведут себя как текст - выстраиваются в ряд по горизонтали и переносятся на следующую строчку, если не хватает места


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


2.3 Списки


В HTML существует три вида списков:

1) Маркированный - список из неупорядоченных элементов

   Состоит из двух тегов:	<ul> (unordered list) - тег начала и конца списка
				<li> (list item) - пункт списка

   Пример:	Список ингредиентов:
		
		<ul>
		  <li>Картошка</li>
		  <li>Морковка</li>
		  <li>Свекла</li>
		</ul>
		   
2) Нумерованный - упорядоченный список, каждый пункт имеет свой номер

   Состоит из двух тегов:	<ol> (ordered list) - тег начала и конца списка
				<li> (list item) - пункт списка

   Пример:	Инструкция по приготовлению:	
		
		<ol>
		  <li>Довести воду до кипения</li>
		  <li>Засыпать ингредиенты</li>
		  <li>Варить 10 минут</li>
		</ol>
			
3) Список определений - используются для создания списка терминов и их определений. В общем случае, каждый пункт — это пара "имя/значение"

   Состоит из трёх тегов:	<dl> (description list) - тег начала и конца списка
				<dt> (term) - термин
				<dd> (description) - определение
   Пример:	<dl>
		  <dt>Гаспачо</dt><dd>лёгкий холодный суп из перетёртых в пюре свежих овощей</dd>
		  <dt>Том-ям</dt><dd>кисло-острый суп на основе куриного бульона с креветками, курицей, рыбой или другими морепродуктами</dd>
		  <dt>Борщ</dt><dd>разновидность супа на основе свёклы, которая придаёт борщу характерный красный цвет</dd>
		</dl>
			
Вложенные списки

Списки можно вкладывать друг в друга. Для этого в элемент списка вставляется ещё один список
Можно вкладывать списки любого вида друг в друга в любой последовательности

Пример:

<ul>
  <li>Омлет
    <ul>
      <li>Молоко</li>
      <li>Яйца</li>
    </ul>
  </li>
  <li>Блинчики
    <ul>
      <li>Молоко</li>
      <li>Яйца</li>
      <li>Мука</li>
      <li>Сахар</li>
      <li>Соль</li>
      <li>Разрыхлитель</li>
    </ul>
  </li>
  <li>Торт</li>
  <li>Пирог</li>
</ul>


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


2.4 Изображения


Изображения

Для добавления изображения используется тег <img>. Это одинарный тег

Основные атрибуты:	src - ссылка на картинку
			title - текст, который отображается при наведении мыши на картинку
			alt - текст, который отображается вместо картинки, если она не загрузилась
			width - ширина картинки в пикселях
			height - высота картинки в пикселях

Пример:	 <img
	  src="http://example.com/cat.jpg"
	  title="Мурка"
	  alt="Рыжая кошка валяется в снегу"
	  width="640"
	  height="480"
	 >
		 
Семантичные изображения с подписью в HTML 5

В HTML 5 появились теги для оформления объектов с подписями - figure и figcaption. Если картинке нужна подпись - можно воспользоваться ими

  Пример:  <figure>
	     <img src="https://www.google.ru/images/branding/googlelogo/2x/googlelogo_color_120x44dp.png﻿">
		<figcaption>
		  Лого гугла от 2015 года
		</figcaption>
	   </figure>


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


2.5 Адреса, ссылки и якоря


Ссылки и адреса

Для создания ссылки необходимо использовать тег <a>. Атрибут href указывает адрес, по которому будет совершён переход: <a href="https://google.com/">Google</a>

Адреса бывают двух видов:

1) Абсолютные адреса - абсолютный адрес, записанный в полной форме

   Пример:	https://google.com/doodles

		https - так называемая «схема», обычно это название протокола. HTTPS - защищённая версия HTTP
		google.com - доменное имя сайта
		/doodles - путь (директория) внутри сайта
   
   Пример:	file:///C:/Users/admin/Desktop/Новая%20папка/image.jpg
   
		file - схема URI, предназначенная для того, чтобы адресовать файлы на локальном компьютере или в локальной сети
		/C:/Users/admin/Desktop/Новая%20папка/image.jpg - путь до файла. %20 - код пробела в URI-кодировании

2) Относительные адреса - сокращённый адрес. В таком адресе начальная часть опущена и браузер использует текущий адрес для определения полного адреса 

   Пример:	//google.com - ссылка на домен в текущем протоколе: если мы находимся по адресу, который начинается с http, то ссылка будет вести на http://google.com
		/sheets - ссылка на путь внутри текущего домена: если мы находимся на http://google.com, то ссылка будет вести на http://google.com/sheets,
			  а если на http://facebook.com, то на http://facebook.com/sheets
		page2 - ссылка на путь внутри текущей директории: если мы находимся на http://site.com/routes/page1, то попадём на http://site.com/routes/page2
			
   Пример:	Файловая система:	Новая папка
					├───img
					│   ├───kisa.jpg
					│   └───kot.png
					├───index.html
					└───style.css
								
					Код в index.html:	...
								<link rel="stylesheet" href="style.css">
								...
								<img src="img/kisa.jpg">
								<img src="img/kot.png">
								
								
   Задание: Замени абсолютные ссылки в HTML-коде на относительные: link ссылается на index.css по относительной ссылке
								   link ссылается на normalize.css по относительной ссылке
								   img получает картинку по относительному пути

								   Структура файловой системы:

								   C:.
								   ├───Users
								   │   └───admin
			  					   │       └───Desktop
								   │           └───Мой сайт
			 					   │               ├───index.html
								   │               ├───index.css
								   │               ├───css
								   │               │   └───normalize.css
								   │               └───img
								   │                   └───picture.jpg
								   
			
   Решение:	<!-- index.html -->
		<!DOCTYPE html>
		  <html lang="ru">
		  <head>
		    <title>Мой сайт!!1</title>
		    <meta charset="UTF-8">
		    <link href="index.css" rel="stylesheet">
		    <link href="css/normalize.css" rel="stylesheet">
		  </head>
		  <body>
		    <h1>Мама, я в интернете!</h1>
		    <img src="img/picture.jpg" title="Ето я">
		   </body>
		  </html>
			
Якоря

Ссылки могут ссылаться не только на страницу, но ещё и на конкретное место на странице. Такие ссылки называются якорными, а места, на которые они ссылаются - якорями

Якорному элементу нужно прописать атрибут id c именем якоря

   Пример:	<h1 id="anchor">Якорь</h1>

Теперь, чтобы сослаться на этот якорь, нужно использовать вот такую ссылку:	<a href="#anchor">Перейти к якорю</a>

При нажатии на ссылку произойдёт переход к нужному месту страницы, а в адресной строке к адресу страницы добавится адрес якоря #anchor

Якоря могут использоваться как в относительных ссылках, как в примере выше, так и в абсолютных

   Задание: Создай ссылку, которая:	ссылается на https://google.com
					будет открываться в новой вкладке
									
   Решение:	<a href="https://google.com" target="_blank">Google</a>


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


3.1 Составные элементы


Таблицы

Таблицы в HTML создаются при помощи тега <table>

Внутри него размещают строки таблицы <tr> (table row)

Внутри строк помещают ячейки строки <td> (table data)

Тегом <th> (table header) размечаются заголовочные ячейки. Он отличается от <td> тем, что его содержимое будет выделено полужирным и выровнено по центру

   Пример таблицы:	<table>
			  <tr>
			    <th>Имя</th>
			    <th>Возраст</th> 
			    <th>Суперспособность</th>
			  </tr>
			  <tr>
			    <td>Логан</td>
			    <td>186</td> 
			    <td>Повышенная способность к регенерации</td>
			  </tr>
			  <tr>
			    <td>Профессор икс</td>
			    <td>94</td>
			    <td>Чтение мыслей, вызов иллюзий, временного паралича, способность останавливать время</td> 
			  </tr>
			</table>

По умолчанию границы таблиц не отображаются. Чтобы включить отображение границ, нужно использовать атрибут border, но атрибут border устарел и его применение в HTML5 не приветствуется 
Данный атрибут заменяет свойство border в CSS

   Пример:	<table border="1"> ... </table>
   
   
thead, tbody, tfoot, caption

Существует возможность группировать строки таблицы тегами <thead>, <tfoot>, <tbody>. Они не являются обязательными, но их рекомендуется использовать
Они дают частям таблицы семантический смысл

<thead> - для заголовка
<tbody> - основной контент таблицы
<tfoot> - нижний колонтитул таблицы

<tfoot> в коде можно расположить перед <tbody> или после него, но браузеры всегда выводят его в конце таблицы
<thead> и <tfoot> можно использовать только по одному разу в одной таблице, а количество <tbody> может быть любым
С помощью нескольких <tbody> можно разделить контент таблицы на смысловые части

Например, в таблице могут быть представлены данные за несколько лет, и каждый год будет вынесен в отдельный <tbody>
Название таблицы можно разместить в теге <caption>. Этот тег располагают внутри тега <table> в самом начале, перед тегами <thead>, <tfoot>, <tbody>
		
   Пример:	<table border="1">
		  <caption>Сотрудники отдела поддержки</caption>
		    <thead>
		      <tr>
			<th>Имя</th>
			<th>Должность</th>
		      </tr>
		      </thead>
		      <tbody>
			<tr>
			  <td>Петя</td>
			  <td>Менеджер</td>
			</tr>
			<tr>
			  <td>Маша</td>
			  <td>Разработчик</td>
			</tr>
		      </tbody>
		      <tfoot>
			<tr>
			  <td>Вася</td>
			  <td>Девопс</td>
			</tr>
		      </tfoot>
	      	</table>


Объединение столбцов

Если количество столбцов в одной строке меньше, чем количество столбцов в другой строке таблицы, то в строке с меньшим количеством ячеек образуется пустое пространство

   Пример:	<table border="1">
	          <tr>
	            <td>Первая ячейка</td>
		    <td>Вторая ячейка</td>
		    <td>Третья ячейка</td>
		  </tr>
		  <tr>
		    <td>Единственная ячейка</td>
		  </tr>
		</table>

Если ячейка не занимает свободное пространство, нужно растянуть её вправо с помощью атрибута colspan, и значением указать количество столбцов, которое в сумме будет занимать ячейка

   Пример:	<table border="1">
		   <tr>
		     <td>Первая ячейка</td>
		     <td>Вторая ячейка</td>
		     <td>Третья ячейка</td>
		   </tr>
		   <tr>
		     <td colspan="3">Единственная ячейка</td>
		   </tr>
		</table>


Объединение строк

Для объединения строк по аналогии со столбцами используется атрибут rowspan. Только в данном случае, ячейка растягивается вниз на указанное количество строк

   Пример:	<table border="1">
		  <tr>
	  	    <td rowspan="2">Левая ячейка</td>
		    <td>Верхняя ячейка</td>
		  </tr>
		  <tr>
		    <td>Нижняя ячейка</td>
		  </tr>
		</table>

Объединение строк и столбцов можно сочетать

Пример:		<table border="1">
		  <tr>
		    <td rowspan="2">Левая ячейка</td>
		    <td>Средняя ячейка</td>
		    <td>Правая ячейка</td>
		  </tr>
		  <tr>
		    <td colspan="2">Нижняя ячейка</td>
		  </tr>
		</table>


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


3.2 Формы


Формы

Формы используются для сбора информации, которую пользователь вводит в специально отведённые поля этой формы
Когда он введёт свои данные и нажмет кнопку «Отправить», все эти данные будут отправлены на сервер
Затем они будут обработаны и сервер отправит ответ пользователю
Существует два основных метода отправки данных: GET и POST

GET

Когда ты вводишь в адресной строке браузера какой-либо адрес и переходишь по нему, ты отправляешь серверу запрос, называемый GET
В таком запросе данные могут отсутствовать, как здесь: https://www.google.ru/
А вот запрос https://www.google.ru/search?q=itс+stepik содержит в себе переменную q, которая имеет значение itc stepik
В данном случае запрос отправляется на адрес https://www.google.ru/search,  а данные из полей и их названия идут после ? через знак &
Предварительно данные кодируются в URL код, чтобы сервер не перепутал служебные символы (вроде /, или &) с частью запроса

POST

Методом POST так же можно отправлять данные в URL. Но, в отличие от GET, он может иметь тело, которое может содержать данные, которые уйдут на сервер
Этот метод обычно используется для отправки форм и загрузки файлов

Какой метод использовать GET или POST, чем отличаются методы:

Страница, созданная методом GET, может быть открыта повторно множество раз. Такая страница может быть кэширована браузерами, проиндексирована поисковыми системами и добавлена в закладки пользователем
Из этого следует, что метод GET следует использовать для получения данных от сервера и не желательно в запросах, предполагающих внесение изменений в ресурс
Например, можно использовать метод GET в HTML форме фильтра товаров: когда нужно, исходя из данных введенных пользователем, переправить его на страницу с отфильтрованными товарами, соответствующими его выбору
Запрос, выполненный методом POST, напротив следует использовать в случаях, когда нужно вносить изменение в ресурс (выполнить авторизацию, отправить форму оформления заказа, форму обратной связи, форму онлайн заявки)
Повторный переход по конечной ссылке не вызовет повторную обработку запроса, так как не будет содержать переданных ранее параметров
Метод POST имеет большую степень защиты данных, чем GET: параметры запроса не видны пользователю без использования специального ПО, что дает методу преимущество при пересылке конфиденциальных данных, например в формах авторизации
HTTP метод POST поддерживает тип кодирования данных multipart/form-data, что позволяет передавать файлы
Также следует заметить, что методы можно комбинировать, то есть, при необходимости вы можете отправить POST запрос на URL, имеющий GET параметры


Создание формы

Элемент формы создаётся парным тегом <form>. Внутри размещаются сами поля, причем те, что расположены за пределами элемента, отправлены не будут
При необходимости в элементе формы можно использовать стороннюю разметку. Тип отображения по умолчанию block (блочный элемент)
Данный тег имеет два обязательных атрибута: action и method

В атрибуте action указывается ссылка на обработчик формы. Обработчиком формы является PHP файл (или файл, написанный на других ЯП), который будет обрабатывать данные этой формы

Атрибут method предназначен для указания метода отправки данных на сервер (GET или POST)


<input>

Поле задается одинарным тегом <input>. Данный тег стилизуется браузерами по-разному
Тип отображения по умолчанию inline (встроенный элемент), поэтому все поля отображаются в одной строке. Эта проблема решается подключением стилей


Типы полей форм

От пользователя нам могут понадобиться самые разные данные. Для удобства их сбора появились типы полей форм, они задаются через атрибут type

   Основные типы полей форм:   1) Текстовое поле. В атрибуте пишем text
								  
				  <input type="text">
								  
			       2) Ввод пароля. Указывается значение password

				  <input type="password">
								  
			       3) Флаги (чекбоксы). Они используются для выбора нескольких вариантов ответа и обозначаются в атрибуте как checkbox
						    Подпись к галочке нужно писать отдельно
								  
				  <input type="checkbox">
								  
			       4) Радио-кнопки. Это выбор одного из нескольких вариантов. Для создания в атрибуте прописываем radio
						Переключатели между собой нужно связывать: пишем атрибут name с одинаковыми значениями
						Также необходим атрибут value
								  
				  <input type="radio" name="gender" value="male" checked> Мужской<br>
				  <input type="radio" name="gender" value="female"> Женский<br>
				  <input type="radio" name="gender" value="other"> Другой
								  
   Эти типы создают кнопки:    1) Загрузка файлов. При значении атрибута file появляется кнопка загрузки
   
				  <input type="file">
								  
			       2) Сброс всех значений. Для создания такой кнопки пишем reset
						       Чтобы все сработало, кнопка должна находиться внутри формы, в которой нужно сбросить значения
								  
				  <input type="reset">
								  
			       3) Отправка. Любая форма бессмысленна, если не отправляется на сервер. Значение для такой кнопки: submit
							   
				  <input type="submit">
								  
			       4) Просто кнопка. Чтобы создать кнопку без определенного действия указываем button
							   
				  <button>Нажми на меня</button>
								
			       5) Раскрывающийся список. Это тег <select>. У него есть несколько атрибутов: name, size, multiple
							 Атрибут name работает как у переключателей
						         Size отвечает за то, сколько строк списка будет одновременно отображено. В качестве значения туда пишется 							    целое положительное число
						         Атрибут multiple отвечает за то, можно ли выбрать сразу несколько вариантов из списка (как checkbox); это 							    атрибут без значения
							 Каждый элемент списка выделяется в тег <option>
						         Так же, как и с <input type="checkbox"> и <input type="radio"> нужно указывать атрибут value со значением, 							     которое будет отправлено на сервер
					
					
Новые типы полей

С появлением стандарта HTML5 добавились и новые типы полей форм. В первую очередь они стали гораздо удобнее для пользователей

- ввод E-Mail, type="email". Текстовое поле, у которого на клавиатуре мобильных устройств появляется символ @
- номер телефона, type="tel". На мобильных устройствах открывается клавиатура с числами
- ввод ссылки, type="url"
- числовое поле, type="number". Помимо клавиатуры с цифрами появляется возможность переключать значения поля. Атрибуты min и max определяют нижнее и верхнее возможное   значение, step - шаг изменения, a value - начальное значение
- числовой ползунок, type="range". Появляются уже указанные атрибуты min, max, step и value
- поиск, type="search". Google Chrome добавляет крестик для очистки введенной строки. На мобильных устройствах появляется кнопка поиска


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


CSS

CSS (Cascading Style Sheets) - каскадные таблицы стилей


4.1 Способы подключения CSS

1) Через внешний файл (link)

   В head HTML-документа нужно добавить link со ссылкой на файл .css:	<link rel="stylesheet" href="style.css">

2) Через тэг <style>

   В head HTML-документа нужно добавить тэг "style":	<style>
 							  .example {
  							    background: #ebac0c;
 							  }
							</style>

3) Через атрибут "style"

   Чтобы стилизовать конкретный элемент, можно использовать атрибут "style":	<div style="border: 1px solid #000; margin-top: 16px;">Див со стилем</div>
   
   Синтаксис внутри атрибута совпадает с синтаксисом внутри фигурных скобок в селекторе CSS
   
   
   
4.2 Синтаксис CSS

Синтаксис CSS состоит из двух частей: селекторы и свойства. Селекторами мы указываем элементы, а свойствами описываем их стиль

4.3 Простые селекторы

Селектор это правило, по которому будут выбраны элементы — например, мы можем обратиться ко всем параграфам или картинкам:  p {} img {}

Свойства

Свойства пишутся у конкретных селекторов между фигурными скобками в формате ключ:значение:   p {
 											       color: red;
 											       text-decoration: underline;
											       }
Каждое новое свойство пишется с новой строки
После каждого свойства необходимо ставить точку с зяпятой



Типы селекторов

1) По тегу

   Самый простой селектор - выбирает элементы по их тегу:   p {
    							      color: red;
							    }

2) По классу

   Самый часто используемый селектор — по классу. Задаём в HTML класс элементам, к которым применить стиль:   <div class="card">
 														Карточка
													      </div>
   
   И теперь эти элементы можно выбрать по имени класса. Имя селектора начинается с точки:   .card {
   												background: #333; /* фон серого цвета */
											     }

3) По id

   Тут всё тоже самое, что и с классом, только атрибут называется id:	<button id="button-go-to-top">
 									  Наверх
									</button>
   
   И имя селектора начинается с решётки:    #button-go-to-top {
  					       text-decoration: underline; /* подчёркивание текста */
					    }

4) По атрибуту 

   Не самый популярный селектор, но иногда он полезен:	 <button data-my-custom-attribute="my-custom-value">
 							    Нажми на меня
							 </button>
   
   Имя и значение атрибута пишется в квадратных скобках. Работает с любым атрибутом:	[data-my-custom-attribute="my-custom-value"] {
   											   color: red;
											}

5) Любой элемент
   
   Селектор * выбирает абсолютно любой элемент. Самый непопулярный селектор, обычно используется для костылей:	 * {
  														   margin: 0;
														 } 

   Задание: Выбери (CSS-селектором) ссылку на главную страницу и задай ей цвет текста #4495d4
   
   Решение: <!DOCTYPE html>
	    <html>
  	      <head>
    	        <meta charset="utf-8">
                <title>Страница</title>
              </head>
              <body>
                <h1>Ошибка 404!</h1>
                <p>Страница не найдена!</p>
                <a id="main-page-link" href="/" class="common-link">Главная страница</a>
             </body>
           </html>
    
    #main-page-link{
       color:#4495d4
    }



4.4 Составные селекторы

Составные селекторы состоят из комбинации простых


Группировка селекторов

Один и тот же набор свойств можно применить к разным селекторам:   button,
								  .button,
								  .cta-button {}

Нужно просто указать  через запятую все селекторы, к которым ты хочешь применить стили

Элемент с классом

Можно стилизовать конкретный элемент, если у него есть определённый класс:  p.example {}
									    
									    Селектор выберет все p, у которых есть класс example
									    
									    .main.active {}

									    Селектор выберет все элементы с классом main, у которых также есть и класс active

									    <div class="main active">Пример</div>


Вложенность

Эти селекторы используются для выбора элементов, которые вложены в другие элементы

Вложенность на любом уровне

Если между двумя простыми селекторами стоит пробел и ничего больше, это означает вложенность на любом уровне:	.page p {
 														  text-decoration: underline;
														}
														
	Этот селектор применит подчёркиваение ко всем <p>, которые находятся внутри элемента с классом page на любом уровне вложенности

	<div class="page">
 	  <p>Как писал Пелевин:</p>
	  <div class="quote">
 	   <p>
   	    Человек привык видеть дьявола везде, кроме зеркала и телевизора.
  	   </p>
 	 </div>
       </div>


Вложенность на первом уровне

Правая угловая скобка > обозначает вложенность на первом уровне:   .page > p {
 								     text-decoration: underline;
								   }
								   
	Этот селектор применится ко всем <p>, которые находятся внутри элемента с классом page на первом уровне вложенности

											    
Как понимать составные селекторы

Хороший способ понимать смысл составных селекторов - читать их справа налево:	.page > .part {}

										 Этот селектор выберет все элементы .part, 
										 которые находятся на первом уровне вложенности в .page

   Задание: Выбрать (селектором) абзац с текстом описания сюжета и задать ему подчеркивание через CSS
   
   Решение: <!DOCTYPE html>
	    <html>
  	      <head>
                <meta charset="utf-8">
                <title>Страница</title>
              </head>
              <body>
                <article>
                  <h1>Жёлтая стрела</h1>
                  <h2>Сюжет</h2>
                  <p class="target">Всё действие происходит в «Жёлтой стреле» — поезде, идущем к разрушенному мосту, заключающем для персонажей повести весь мир. 				      Главный герой пытается понять этот мир и сойти с поезда.
		  </p>
 	        </article>
             </body>
           </html>
	   
	   .target {
	     text-decoration: underline;
           }


Редко используемые селекторы


Элементы с определенным атрибутом

Можно задавать стили в зависимости от конкретного значения конретного атрибута:	  input[type="password"] {}
										  
										  Этот селектор выберет все элементы <input type="password">


Первый соседний элемент

Для того, чтобы выбрать элемент, который находится сразу после другого элемента, используется знак +:	img + p {
													  margin-top: 0;
													  font-style: italic;
													}
													
	Этот код применит стили во всех <p>, идущих сразу после <img>:
	
	<img src="https://www.google.ru/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png" />
	<p>Это лого гугла</p>
	<p>А это просто абзац</p>


Любой соседний элемент

Для того, чтобы выбрать элемент, который находится после другого элемента, используется знак ~:	  img ~ p {
 												    margin-top: 0;
												    font-style: italic;
												  }
	
												  Этот код применит стили во всех <p>, идущих после <img>, 
												  даже если между img и p есть другие элементы



5.1 Текст и шрифт


С помощью CSS можно делать любые операции с текстом и шрифтом

Самые основные действия это:

- изменение свойств шрифта: семейство, начертание, размер, толщина, стиль и т.д.
- изменение свойств текста: цвет, расстояние между буквами и строками, подчёркивание/надчёркивание/зачёркивание, выравнивание и т.д.

Существует такое понятие, как семейство шрифтов. В HTML шрифты делятся на 4 базовых семейства:  1) serif - шрифты с засечками или антиква
												2) sans-serif - шрифты без засечек, гротеск или рубленые шрифты
												3) monospace - моноширинные шрифты
												4) cursive - рукописные шрифты

	fantasy - аллегоричные шрифты - шрифты, которые не попадают в остальные семейства


Когда мы используем определённый шрифт, мы указываем его имя в свойстве font-family:	p {
  											  font-family: 'Roboto';
											}
											
Но у такого подхода есть одна проблема: если на устройстве пользователя нет этого шрифта, то он не увидит текста

Эта проблема решается с помощью fallback (фоллбэк):	p {
   							  font-family: 'Roboto', 'Helvetica Nue', sans-serif;
							}

Шрифты, которые идут через запятую после основного шрифта, называются fallback fonts (фоллбэк-шрифты). Обычно их несколько - следующий шрифт применяется, если не найден предыдущий

В конце списка фоллбэк-шрифтов всегда указывается семейство, в которое входят предыдущие шрифты. Таким образом, если у пользователя нет конкретных, указанных нами шрифтов, то применится любой шрифт из указанного семейства, которой есть у него на устройстве



5.2 Цвет и фон

Фон

В CSS блокам можно задавать фон. Фоном может быть цвет или картинка. Картинку можно располагать с помощью координат, центрировать, растягивать на весь блок, или задавать в виде повторяющегося бесконечного паттерна. Всё это делается с помощью свойства background

	Примеры:	.example {
  			  /* цвет фона «продающий красный», задан в HEX-формате */
   			  background: #e64c0c;
			}

			.example {
   			  /* картинка на фоне */
   			  background: url('images/nude-president.png'); 
			  /* background-size отвечает за размер картинки, cover - картинка растягивается на весь блок, сохраняя пропорции */
   			  background-size: cover;
			}


Цвет

Цвет можно ставить не только фону, но и тексту, границам, теням

Есть несколько способов указать цвет:

1) Имя цвета из списка HTML-цветов, например "red", "green", "blue", "lemonchiffon"

2) HEX, цвет в шестнадцатеричном формате. Начинается с решётки, например #3ae6сa. Можно подобрать с помощью любого color picker'а. Первые шесть символов отвечают за      цвет, последние два - необязательные - отвечают за прозрачность. Но прозрачность удобнее задавать через RGBA и HSLA, потому что десятичные дроби удобнее читать и      редактировать

3) RGB (red, green, blue) - цвет, заданый тремя значениями (от 0 до 255) базовых цветов - красного, зелёного и синего. Пример: rbg(255, 123, 13)

4) RGBA - тоже самое, что и RGB, только с прозрачностью, которая задаётся четвёртым числом от 0 до 1, пример: rgba(144, 32, 16, 0.5)

5) HSL, HSLA - цветовая модель, в которой цветовыми координатами являются тон, насыщенность и светлота. HSLA - HSL + прозрачность. Пример: hsl(120, 100%, 50%)



5.3 Тип отображения элемента (display)

С помощью CSS-свойства display можно переопределить тип отображения элемента

Оно может иметь одно из следующих значений:

1) display: none; - элемент перестаёт отображаться на странице

2) display: block; - блочный элемент. Ему можно задать ширину, высоту, границы, отступы

3) display: inline; - строчный элемент. Задание ширины и высоты не влияет на inline элементы. Задание границ и отступов будет изменять положение окружающего текста, но    не будет влиять на положение окружающих блочных элементов

4) display: inline-block; - что-то среднее между блочным и строчным элементом. Ему можно задать ширину, высоту, границы и отступы, но он не будет создавать перенос        строки до и после себя, в отличие от блочных элементов. С помощью этого типа можно распологать блоки горизонтально в ряд.

5) flex и inline-flex - это флексбоксы. Элементы внутри них располагаются по определённым правилам, но снаружи они ведут себя как блоки и инлайн-блоки соотвественно



5.4 Блочная модель в CSS

Блокам можно задать:	1) ширину (width) и высоту (height)
			2) отступы: внутренние (padding) и внешние (margin)
			3) границы (border)

Эти свойства вместе с содержимым элемента составляют его блочную модель

margin - внешний отступ
border - граница, между внутренним и внешним
padding - внутренний отступ, под этим отступом продолжается фон элемента
content - содержимое элемента

Размеры блока с незаданной шириной и высотой определяются по формуле: margin + padding + border + content. Эту особенность используют, чтобы создавать гибкие компоненты, которые будут изменять свои размеры в соответствии с содержимым



5.5 Единицы измерения

Любую единицу измерения можно использовать для задания любого свойства, которое отвечает за размер. Например, с помощью vh можно задавать размер шрифта



5.6 Переполнение контента

Когда контент не вмещается в блок, происходит переполнение контента и в блоке появляется полоса прокрутки 

Свойство overflow управляет отображением содержания блочного элемента при переполнении

	Значения overflow:	1) overflow: visible; - отображается все содержание блока, даже за пределами установленной высоты и ширины

				2) overflow: hidden; - отображается только область внутри блока, остальное будет скрыто

				3) overflow: scroll; - всегда добавляются полосы прокрутки, даже если контент помещается

				4) overflow: auto; - полосы прокрутки добавляются только при необходимости



5.7 Обтекание элементов (float), Clearfix

Свойство float задаёт, по какому краю (левому или правому) будет выровнен элемент. С противоположной стороны его будут обтекать другие элементы - текст и блоки

Свойство float может иметь следующие значения:	 1) left - выравнивание по левой стороне, обтекание справа
						 2) right  - выравнивание по правой стороне, обтекание слева
						 3) none - выравнивание не задаётся (нужно, чтобы сбросить ранее заданное значение)

После "плавающих" блоков необходимо очищать обтекания, чтобы последующие элементы не стали обтекать "плавающие" блоки

Самое простое решение - очищающий блок. После плавающих блоков нужно добавить еще один блок и задать ему CSS:	clear: both;



5.8 Позиционирование

Позиционирование определяет, к какой части страницы элемент будет «прикреплён»

Тип позиционирования задаётся с помощью свойства position

Типы позиционирования:

 - Статическое позиционирование (static)

   Этот тип стоит у элементов по умолчанию. Элемент располагается в потоке относительно остальных элементов на странице. В потоке, то есть в таком порядке, что он        идёт после элементов, которые объявлены перед ним. И элементы, которые объявлены после него, идут после него.

  <h1>Заголовок</h1>
  <p>Абзац</p>

- Абсолютное позиционирование (absolute)
  
  Абсолютное позиционирование - тоже относительное. Но задаётся оно по-другому. Положение абсолютного блока задаётся относительно страницы или относительно элемента с   position: relative, в которой он вложен. Положение такого блока задаётся с помощью свойств top, right, bottom, left

- Фиксированное позиционирование (fixed)

  Задаётся так же, как и абсолютное, но блок прикрепляется не к странице, а к экрану. То есть при прокрутке страницы он остаётся на своём месте

- Относительное позиционирование (position: relative)

  Положение элемента устанавливается относительно его исходного места в потоке. Свойства left, top, right и bottom изменяет позицию элемента и сдвигает его в ту или     иную сторону от первоначального расположения. А ещё оно работает как родитель, относительно которого можно задавать абсолютную позицию блокам, которые в него         вложены
  
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  
6 Продвинутая вёрстка


SPA (Single Page Application) - одностраничные приложения. Они работают быстрее и плавнее, но разрабатывать их гораздо сложнее.

PWA (Progressive Web App) - технология, которая позволяет скачать сайт и добавить его на рабочий стол или в меню телефона. Он будет открываться даже без интернета и занимать очень маленький размер по сравнению с аналогичным приложением из AppStore или Google Play. Такие приложения уже есть у Instagram, ВК, Tinder, Telegram, AliExpress и много кого ещё


6.1 Flexbox

Флексбокс - это система для расположения элементов. С помощью неё можно верстать сложные макеты без боли и ругательств

  Пример:   .blocks {
 	      display: flex;
              justify-content: space-between;
             }

6.2 Псевдоклассы

Псевдоклассы - это ключевые слова, которые добавляются к селектору. Стили, заданные таким образом, применяются только для определённых состояний
	       Например, :hover может быть использован для изменения цвета кнопки при наведении курсора

  Пример :   button:hover {
               background: red;
             }

Стили псевдокласса переопределяют заданные ранее стили, если они есть

  Пример:   button {
              border: 1px solid black;
              padding: 8px 16px;
              background: #c9c9c9;
            }

            button:hover {
              background: #e9e9e9;
            }

Самые часто используемые псевдоклассы:	:hover - появляется при наведении мышки
					:active - появляется при нажатии на элемент
					:focus - появляется при фокусировке на элементе (например, когда выбрано поле ввода текста)


6.3 Анимация переходов

Переходы состояний некоторых в CSS можно анимировать. Это работает так: если значение свойства меняется, то вместо резкого изменения, происходит плавный переход

  Пример:   button {
    	      border-radius: 4px;
              transition: border-radius 0.5s ease-in;
            }

            button:hover {
              border-radius: 16px;
            }

За анимацию отвечает свойство transition. Его значние записывается так:

 1) свойство, изменения которого нужно анимировать (если нужно анимировать несколько, можно написать all)
 2) продолжительность анимации в секундах (рекомендуется не ставить её больше 0.3 секунды)
 3) функция плавности
 
 
6.4 Медиа-запросы
 
Медиа-запросы позволяют задавать стили для определенных типов устройств, например, принтеры, экраны или синтезаторы речи

Чаще всего они используются, чтобы создавать адаптивные страницы

  Синтаксис:	@media правило {
   		   /* обычный CSS-код, который применится при соблюдении правила */
		}
  
  Пример:	@media screen and (max-width: 320px) {
    		   img {
        	   width: 100%;
    		   }
		}	

Этот код означает следующее: на экранах, ширина которых меньше или равна 320px, картинки будут иметь ширину 100%


6.5 Адаптивная сетка

Адаптивная сетка - структура, в которой размещаются блоки страницы. Сетка позволяет легко указывать, какое пространство блоки занимают на разных экранах.

Адаптивная сетка подключается как отдельный CSS-файл. В этом файле заданы стили для структурных элементов сетки: контейнер сетки, строка, колонки. Существует большое количество сеток, созданных различными разработчиками. Одна из них - flexboxgrid2


Колонки

Любая сетка делится на колонки. На макете они выглядят как вертикальные полосы, по которым выровнены блоки страницы
Эта сетка состоит из 6-ти колонок, но обычно сетки состоят из 12-ти: это число делится на 2, на 3, на 4 и на 6

Удобство колонок в том, что для одного и того же блока можно выбрать, сколько колонок он займёт на разных экранах


Брейкпоинты

Breakpoints (брейкпоинтс) - значения ширины экрана, при которых происходит переключение отображения колонок. Проще говоря, это ширина, которая прописана в медиа-                                 запросах сетки

Если ты будешь менять ширину окна на странице, где есть сетка, то увидишь «щелчки» переключения отображения. Они происходят при переходе через брейкпоинты

В разных сетках эти значения могут быть заданы по-разному. В flexboxgrid2 они вот такие:  xs: 0..575px
											  sm: 576..767px
											  md: 768..991px
											  lg: 992..1199px
											  xl: 1200px+
											  
Каждая ширина экрана называется по-своему: xs, sm, md, lg, xl. От слов extra small, small, medium, large, extra large. Эти названия используются в именах классов


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


7 CSS-фреймворки


CSS-фреймворк - это CSS-код, который написали одни разработчики и выложили его для других. Они нужны для того, чтобы экономить время при разработке, не изобретать                     свой велосипед без надобности. Обычно такие фреймворки включают в себя набор компонентов и адаптивную сетку

Чтобы использовать CSS-фреймворк, нужно подключить его файлы к HTML-странице. После этого надо просто добавлять классы HTML-элементам, которые прописаны в файлах фреймворка, чтобы всё стало красиво

  Пример:   <button class="btn btn-primary">Primary</button>
 
Самый популярный CSS-фреймворк - Bootstrap от разработчиков Twitter


Плюсы фреймворков:

- Набор готовых UI-компонентов
- Скорость разработки выше
- Более красивый интерфейс, если у разработчиков плохой вкус или время на разработку ограничено
- Многие разработчики с ними знакомы
- Проще поддерживать код
- Новым членам команды проще начать работу
- Сообщество
- Много примеров использования и обучающих материалов
- Маленькое количество багов
- Легко нагуглить решение почти любой проблемы

Минусы фреймворков:

- Обязательство работать в рамках, заданных разработчиками фреймворка
- Если возникает проблема, решение которой не предусмотрено во фреймворке, приходится изворачиваться
- Чем дальше развивается проект, тем сложнее поменять или избавиться от фреймворка
- Обычно используется только часть возможностей фреймворка
- Неиспользуемый код увеличивает размер страниц, они загружаются медленее
- Необходимо тратить время на изучение
- Шаблонность: сайты, созданные на основе фреймворка обычно не отличаются индивидуальностью


Фреймворки нужно использовать тогда, когда:

- время на разработку ограничено, и нужно запустить сайт как можно скорее
- индивидуальность оформления и скорость загрузки сайта не так важны
- проект не планируется сильно развивать в дальнейшем
- нет дизайнера и разработчик не может сам сделать красивый интерфейс


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


8 Деплой сайта


Деплой — процесс «разворачивания» веб-сервиса, например, сайта, в рабочем окружении

Рабочее окружение — место, где сайт запускается и доступен для запросов. Это может быть как готовый хостинг, так и своя собственная серверная инфраструктура

Деплоятся не только веб-сервисы, но любые сервисы, доступные по сети. Даже если эта сеть внутренняя и не доступна для запросов через интернет


8.1 Что такое фронтенд и бэкенд

В веб-разработке (разработке сайтов и браузерных приложений) существует два основных направления: фронтенд и бэкенд

Фронтенд отвечает за тот код, который выполняется на стороне пользователя, то есть на его устройстве - компьютере или телефоне
Бэкенд отвечает за серверную часть — обработку запросов пользователя и хранение данных

Иногда по ошибке считают, что фронтенд это всё то, что видит пользователь, а бэкенд - то что не видит. На самом деле, во фронтенде также существует много кода, который решает задачи на стороне клиента, но при этом пользователь даже не догадывается об этом. Например, рекламные трекеры или скрипты для аналитики через Яндекс.Метрику/Google Analytics


8.2 Фронтенд

Фронтенд состоит не только из разметки (HTML) и вёрстки (CSS), но ещё и из программирования (JavaScript). Для развития в веб-разработке и фронтенде в частности, изучение JS — следующий шаг после изучения HTML и CSS

Большинство современных сайтов разрабатывают в виде SPA. SPA создаются с помощью различных JavaScript-фреймворков — React, Vue, Ember, Angular, Svelte и других


8.3 Бэкенд

Код бэкенда выполняется на сервере. Когда бэкенд получает запрос от пользователя, он отправляет пользователю код фронтенда, который запускается в браузере

То есть бэк присылает ему не готовый сайт, а «инструкцию» для его браузера (HTML, CSS, JS), как этот сайт собрать. И все остальные файлы: фото, видео, аудио, документы и т.д. 

Бэкенд-разработчики разрабатывают серверную часть приложений. Кроме программирования очень часто они занимаются также настройкой и администрированием серверов, проектированием баз данных и другими смежными вещами

Популярные языки для разработки серверной части:

PHP — самый популярный бэкендерский язык

Python — универсальный язык, хорошо подходящий для бэкенда в том числе

Java, C# — чаще всего используются в больших корпоративных проектах, где они взаимодействуют с громоздкими экосистемами

JavaScript — на JS можно писать не только фронт, но и бэк


8.4 Хостинг

Хостинг — сервис, который размещает код бэкенда на сервере. Обычно это компания, которая за деньги позволяет разместить на их серверах сайт, взамен предоставляя                 гарантию бесперебойного доступа к нему и службу поддержки

Существует много видов хостинга: от бесплатных и простых, до баснословно дорогих и монструозно сложных. Выбирать хостинг нужно всегда под определённые задачи

Статические файлы (статика) — файлы, которые хранятся на сервере и отправляются клиенту в неизменном виде. Среди них все .html-файлы, .css-файлы, .js-файлы, картинки,                               документы и т.д. Они отличаются от динамического контента тем, что во время формирования ответа на запрос пользователя они просто                                     берутся с жесткого диска сервера и отправляются как есть
